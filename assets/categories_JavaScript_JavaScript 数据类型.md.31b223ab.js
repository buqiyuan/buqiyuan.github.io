import{_ as s,c as n,k as a,a as l,t as p,Q as o,o as e}from"./chunks/framework.98e61c02.js";const t=JSON.parse('{"title":"JavaScript 数据类型","description":"","frontmatter":{"title":"JavaScript 数据类型","author":"猿谋人","date":"2021/04/18","order":1,"tags":["JavaScript"],"editLink":false},"headers":[],"relativePath":"categories/JavaScript/JavaScript 数据类型.md","filePath":"categories/JavaScript/JavaScript 数据类型.md"}'),c={name:"categories/JavaScript/JavaScript 数据类型.md"},r={id:"frontmatter-title",tabindex:"-1"},y=a("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),E=o('<h2 id="_1-数据类型" tabindex="-1">1. 数据类型 <a class="header-anchor" href="#_1-数据类型" aria-label="Permalink to &quot;1. 数据类型&quot;">​</a></h2><p><strong>原始类型与引用类型</strong></p><ul><li>原始类型：Undefined，Null，Boolean，String，Number，Symbol，BigInt（ES10 引入）</li><li>引用类型：Object，Boolean，String，Number......</li></ul><p>原始类型值直接存储在栈内存，而引用类型值存储在堆内存，其栈内存值存储的是值存储地址，如下图所示：</p><p><img src="/images/categories/javascript/数据存储.png" alt=""></p><p>原始类型复制即重新复制一份原始数据，而引用类型复制为拷贝地址，两个地址指向同一个堆内存，更改其中一个也会影响另一个，如下图所示：</p><p><img src="/images/categories/javascript/数据复制.png" alt=""></p><h2 id="_2-类型识别" tabindex="-1">2. 类型识别 <a class="header-anchor" href="#_2-类型识别" aria-label="Permalink to &quot;2. 类型识别&quot;">​</a></h2><h3 id="_2-1-typeof" tabindex="-1">2.1 typeof <a class="header-anchor" href="#_2-1-typeof" aria-label="Permalink to &quot;2.1 typeof&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// typeof可以识别标准类型（除null）；</span></span>\n<span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// string</span></span>\n<span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// number</span></span>\n<span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// boolean</span></span>\n<span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// undefined</span></span>\n<span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// object</span></span>\n<span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> {</span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">}; </span><span style="color:#6A737D;">// object</span></span>\n<span class="line"><span style="color:#E1E4E8;">​</span></span>\n<span class="line"><span style="color:#6A737D;">// typeof不能识别具体的对象类型（除function）</span></span>\n<span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(){}; </span><span style="color:#6A737D;">// function</span></span>\n<span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> []; </span><span style="color:#6A737D;">// object</span></span>\n<span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// object</span></span>\n<span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">\\d</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// object</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">(){}</span></span>\n<span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// object</span></span>\n<span class="line"><span style="color:#E1E4E8;">​</span></span>\n<span class="line"><span style="color:#6A737D;">// ES6 新加的symbol也能识别</span></span>\n<span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// symbol</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// typeof可以识别标准类型（除null）；</span></span>\n<span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// string</span></span>\n<span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// number</span></span>\n<span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// boolean</span></span>\n<span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// undefined</span></span>\n<span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// object</span></span>\n<span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> {</span><span style="color:#6F42C1;">a</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">}; </span><span style="color:#6A737D;">// object</span></span>\n<span class="line"><span style="color:#24292E;">​</span></span>\n<span class="line"><span style="color:#6A737D;">// typeof不能识别具体的对象类型（除function）</span></span>\n<span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){}; </span><span style="color:#6A737D;">// function</span></span>\n<span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> []; </span><span style="color:#6A737D;">// object</span></span>\n<span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// object</span></span>\n<span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">\\d</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// object</span></span>\n<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(){}</span></span>\n<span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// object</span></span>\n<span class="line"><span style="color:#24292E;">​</span></span>\n<span class="line"><span style="color:#6A737D;">// ES6 新加的symbol也能识别</span></span>\n<span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// symbol</span></span></code></pre></div><h3 id="_2-2-instanceof" tabindex="-1">2.2 instanceof <a class="header-anchor" href="#_2-2-instanceof" aria-label="Permalink to &quot;2.2 instanceof&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// instanceof不能判别原始类型</span></span>\n<span class="line"><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// false</span></span>\n<span class="line"><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// false</span></span>\n<span class="line"><span style="color:#E1E4E8;">​</span></span>\n<span class="line"><span style="color:#6A737D;">// instanceof能够判别内置对象类型</span></span>\n<span class="line"><span style="color:#E1E4E8;">[] </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// true</span></span>\n<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">\\d</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegExp</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// true</span></span>\n<span class="line"><span style="color:#E1E4E8;">​</span></span>\n<span class="line"><span style="color:#6A737D;">// instanceof能够判别自定义类型及父子类型</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Point</span><span style="color:#E1E4E8;">(){}</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Circle</span><span style="color:#E1E4E8;">(){}</span></span>\n<span class="line"><span style="color:#79B8FF;">Circle</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Point</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#79B8FF;">Circle</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Circle;</span></span>\n<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Circle</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">c </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Point</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// true</span></span>\n<span class="line"><span style="color:#E1E4E8;">c </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Circle</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// true</span></span>\n<span class="line"><span style="color:#E1E4E8;">​</span></span>\n<span class="line"><span style="color:#6A737D;">// instanceof 不能识别symbol</span></span>\n<span class="line"><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// instanceof不能判别原始类型</span></span>\n<span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// false</span></span>\n<span class="line"><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// false</span></span>\n<span class="line"><span style="color:#24292E;">​</span></span>\n<span class="line"><span style="color:#6A737D;">// instanceof能够判别内置对象类型</span></span>\n<span class="line"><span style="color:#24292E;">[] </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// true</span></span>\n<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">\\d</span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegExp</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// true</span></span>\n<span class="line"><span style="color:#24292E;">​</span></span>\n<span class="line"><span style="color:#6A737D;">// instanceof能够判别自定义类型及父子类型</span></span>\n<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Point</span><span style="color:#24292E;">(){}</span></span>\n<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Circle</span><span style="color:#24292E;">(){}</span></span>\n<span class="line"><span style="color:#005CC5;">Circle</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Point</span><span style="color:#24292E;">();</span></span>\n<span class="line"><span style="color:#005CC5;">Circle</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Circle;</span></span>\n<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Circle</span><span style="color:#24292E;">();</span></span>\n<span class="line"><span style="color:#24292E;">c </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Point</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// true</span></span>\n<span class="line"><span style="color:#24292E;">c </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Circle</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// true</span></span>\n<span class="line"><span style="color:#24292E;">​</span></span>\n<span class="line"><span style="color:#6A737D;">// instanceof 不能识别symbol</span></span>\n<span class="line"><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// false</span></span></code></pre></div><h3 id="_2-3-constructor" tabindex="-1">2.3 constructor <a class="header-anchor" href="#_2-3-constructor" aria-label="Permalink to &quot;2.3 constructor&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// constructor是对象原型上的属性，指向构造器本身</span></span>\n<span class="line"><span style="color:#E1E4E8;">​</span></span>\n<span class="line"><span style="color:#6A737D;">//constructor可以识别标准类型（除null/undefined）</span></span>\n<span class="line"><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> String; </span><span style="color:#6A737D;">// true</span></span>\n<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> Number; </span><span style="color:#6A737D;">// true</span></span>\n<span class="line"><span style="color:#E1E4E8;">true.</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> Boolean; </span><span style="color:#6A737D;">// true</span></span>\n<span class="line"><span style="color:#E1E4E8;">({}).</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> Object; </span><span style="color:#6A737D;">// true</span></span>\n<span class="line"><span style="color:#E1E4E8;">​</span></span>\n<span class="line"><span style="color:#6A737D;">// constructor可以识别内置对象</span></span>\n<span class="line"><span style="color:#E1E4E8;">[].</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> Array; </span><span style="color:#6A737D;">// true</span></span>\n<span class="line"><span style="color:#E1E4E8;">​</span></span>\n<span class="line"><span style="color:#6A737D;">// constructor可以识别自定义类型</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">(){}</span></span>\n<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> Person; </span><span style="color:#6A737D;">// true</span></span>\n<span class="line"><span style="color:#6A737D;">// 也可以识别symbol</span></span>\n<span class="line"><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> Symbol;  </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// constructor是对象原型上的属性，指向构造器本身</span></span>\n<span class="line"><span style="color:#24292E;">​</span></span>\n<span class="line"><span style="color:#6A737D;">//constructor可以识别标准类型（除null/undefined）</span></span>\n<span class="line"><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> String; </span><span style="color:#6A737D;">// true</span></span>\n<span class="line"><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> Number; </span><span style="color:#6A737D;">// true</span></span>\n<span class="line"><span style="color:#24292E;">true.</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> Boolean; </span><span style="color:#6A737D;">// true</span></span>\n<span class="line"><span style="color:#24292E;">({}).</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> Object; </span><span style="color:#6A737D;">// true</span></span>\n<span class="line"><span style="color:#24292E;">​</span></span>\n<span class="line"><span style="color:#6A737D;">// constructor可以识别内置对象</span></span>\n<span class="line"><span style="color:#24292E;">[].</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> Array; </span><span style="color:#6A737D;">// true</span></span>\n<span class="line"><span style="color:#24292E;">​</span></span>\n<span class="line"><span style="color:#6A737D;">// constructor可以识别自定义类型</span></span>\n<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(){}</span></span>\n<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> Person; </span><span style="color:#6A737D;">// true</span></span>\n<span class="line"><span style="color:#6A737D;">// 也可以识别symbol</span></span>\n<span class="line"><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> Symbol;  </span><span style="color:#6A737D;">// true</span></span></code></pre></div><h3 id="_2-4-object-prototype-tostring" tabindex="-1">2.4 Object.prototype.toString() <a class="header-anchor" href="#_2-4-object-prototype-tostring" aria-label="Permalink to &quot;2.4 Object.prototype.toString()&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">obj</span><span style="color:#E1E4E8;">){</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(obj).</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toLowerCase</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#6A737D;">// Object.prototype.toString可以识别标准类型</span></span>\n<span class="line"><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// number</span></span>\n<span class="line"><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;abc&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// string</span></span>\n<span class="line"><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// boolean</span></span>\n<span class="line"><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// undefined</span></span>\n<span class="line"><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// null</span></span>\n<span class="line"><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">({}); </span><span style="color:#6A737D;">// object</span></span>\n<span class="line"><span style="color:#E1E4E8;">​</span></span>\n<span class="line"><span style="color:#6A737D;">// Object.prototype.toString可以识别内置对象类型</span></span>\n<span class="line"><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">([]); </span><span style="color:#6A737D;">// array</span></span>\n<span class="line"><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Date); </span><span style="color:#6A737D;">// date</span></span>\n<span class="line"><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">\\d</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// regexp</span></span>\n<span class="line"><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(){}); </span><span style="color:#6A737D;">// function</span></span>\n<span class="line"><span style="color:#E1E4E8;">​</span></span>\n<span class="line"><span style="color:#6A737D;">// Object.prototype.toString 不能识别自定义类型</span></span>\n<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">(){}</span></span>\n<span class="line"><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Person); </span><span style="color:#6A737D;">// object</span></span>\n<span class="line"><span style="color:#E1E4E8;">​</span></span>\n<span class="line"><span style="color:#6A737D;">// 也可以识别symbol</span></span>\n<span class="line"><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// symbol</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">(</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">){</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(obj).</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toLowerCase</span><span style="color:#24292E;">();</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"><span style="color:#6A737D;">// Object.prototype.toString可以识别标准类型</span></span>\n<span class="line"><span style="color:#6F42C1;">type</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// number</span></span>\n<span class="line"><span style="color:#6F42C1;">type</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// string</span></span>\n<span class="line"><span style="color:#6F42C1;">type</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// boolean</span></span>\n<span class="line"><span style="color:#6F42C1;">type</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// undefined</span></span>\n<span class="line"><span style="color:#6F42C1;">type</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// null</span></span>\n<span class="line"><span style="color:#6F42C1;">type</span><span style="color:#24292E;">({}); </span><span style="color:#6A737D;">// object</span></span>\n<span class="line"><span style="color:#24292E;">​</span></span>\n<span class="line"><span style="color:#6A737D;">// Object.prototype.toString可以识别内置对象类型</span></span>\n<span class="line"><span style="color:#6F42C1;">type</span><span style="color:#24292E;">([]); </span><span style="color:#6A737D;">// array</span></span>\n<span class="line"><span style="color:#6F42C1;">type</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Date); </span><span style="color:#6A737D;">// date</span></span>\n<span class="line"><span style="color:#6F42C1;">type</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">\\d</span><span style="color:#032F62;">/</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// regexp</span></span>\n<span class="line"><span style="color:#6F42C1;">type</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){}); </span><span style="color:#6A737D;">// function</span></span>\n<span class="line"><span style="color:#24292E;">​</span></span>\n<span class="line"><span style="color:#6A737D;">// Object.prototype.toString 不能识别自定义类型</span></span>\n<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(){}</span></span>\n<span class="line"><span style="color:#6F42C1;">type</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Person); </span><span style="color:#6A737D;">// object</span></span>\n<span class="line"><span style="color:#24292E;">​</span></span>\n<span class="line"><span style="color:#6A737D;">// 也可以识别symbol</span></span>\n<span class="line"><span style="color:#6F42C1;">type</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// symbol</span></span></code></pre></div><h3 id="_2-5-总结" tabindex="-1">2.5 总结 <a class="header-anchor" href="#_2-5-总结" aria-label="Permalink to &quot;2.5 总结&quot;">​</a></h3><ul><li>typeof 目标 === &#39;object&#39; —— 可以判断基本数据类型（除 null 为 object），引用对象类型均为 object（除 function）</li><li>目标 instanceof Array === true —— 不可以判断基本数据类型，可以判断引用对象类型包括自定义对象</li><li>目标.constructor === Object —— 可以判断基本数据类型（除 null 和 undefined）和对象数据类型（内置和自定义）</li><li>Object.prototype.toString.call(目标).slice(8,-1).toLowerCase() === &#39;string&#39; —— 可以判断基本数据类型和引用对象类型，不能识别自定义对象</li></ul><h2 id="_3-类型转化" tabindex="-1">3. 类型转化 <a class="header-anchor" href="#_3-类型转化" aria-label="Permalink to &quot;3. 类型转化&quot;">​</a></h2><h3 id="_3-1-强制转换" tabindex="-1">3.1 强制转换 <a class="header-anchor" href="#_3-1-强制转换" aria-label="Permalink to &quot;3.1 强制转换&quot;">​</a></h3><ul><li><code>Number()</code></li><li><code>String()</code></li><li><code>Boolean()</code></li><li><code>pareseInt() / parseFloat()</code></li></ul><h3 id="_3-2-隐式转换" tabindex="-1">3.2 隐式转换 <a class="header-anchor" href="#_3-2-隐式转换" aria-label="Permalink to &quot;3.2 隐式转换&quot;">​</a></h3><p><img src="/images/categories/javascript/隐式转换.jpg" alt="比较时类型转换顺序"></p><p><img src="/images/categories/javascript/类型转换.jpg" alt=""></p><h4 id="_3-2-1-boolean" tabindex="-1">3.2.1 Boolean() <a class="header-anchor" href="#_3-2-1-boolean" aria-label="Permalink to &quot;3.2.1 Boolean\\(\\)&quot;">​</a></h4><p>除了 +0、-0、undefined、null、&#39;&#39;、false、NaN 之外其余均为 true。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>所有对象（包括空对象）的转换结果都是<code>true</code>，甚至连<code>false</code>对应的布尔对象<code>new Boolean(false)</code>也是<code>true</code>，注意区别布尔值与布尔对象。</p></div><h4 id="_3-2-2-number" tabindex="-1">3.2.2 Number() <a class="header-anchor" href="#_3-2-2-number" aria-label="Permalink to &quot;3.2.2 Number\\(\\)&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 数值：转换后还是原来的值</span></span>\n<span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">324</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 324</span></span>\n<span class="line"><span style="color:#6A737D;">// 字符串：如果可以被解析为数值，则转换为相应的数值</span></span>\n<span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;324&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 324</span></span>\n<span class="line"><span style="color:#6A737D;">// 字符串：如果不可以被解析为数值，返回 NaN</span></span>\n<span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;324abc&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// NaN</span></span>\n<span class="line"><span style="color:#6A737D;">// 空字符串转为0</span></span>\n<span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0</span></span>\n<span class="line"><span style="color:#6A737D;">// 布尔值：true 转成 1，false 转成 0</span></span>\n<span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 1</span></span>\n<span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0</span></span>\n<span class="line"><span style="color:#6A737D;">// undefined：转成 NaN</span></span>\n<span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// NaN</span></span>\n<span class="line"><span style="color:#6A737D;">// null：转成0</span></span>\n<span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">({ a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> }) </span><span style="color:#6A737D;">// NaN</span></span>\n<span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]) </span><span style="color:#6A737D;">// NaN</span></span>\n<span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">]) </span><span style="color:#6A737D;">// 5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 数值：转换后还是原来的值</span></span>\n<span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">324</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 324</span></span>\n<span class="line"><span style="color:#6A737D;">// 字符串：如果可以被解析为数值，则转换为相应的数值</span></span>\n<span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;324&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 324</span></span>\n<span class="line"><span style="color:#6A737D;">// 字符串：如果不可以被解析为数值，返回 NaN</span></span>\n<span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;324abc&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// NaN</span></span>\n<span class="line"><span style="color:#6A737D;">// 空字符串转为0</span></span>\n<span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0</span></span>\n<span class="line"><span style="color:#6A737D;">// 布尔值：true 转成 1，false 转成 0</span></span>\n<span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 1</span></span>\n<span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0</span></span>\n<span class="line"><span style="color:#6A737D;">// undefined：转成 NaN</span></span>\n<span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// NaN</span></span>\n<span class="line"><span style="color:#6A737D;">// null：转成0</span></span>\n<span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">({ a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> }) </span><span style="color:#6A737D;">// NaN</span></span>\n<span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]) </span><span style="color:#6A737D;">// NaN</span></span>\n<span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]) </span><span style="color:#6A737D;">// 5</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>null 转为 0，undefined 转为 NaN！！！</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Number 方法的参数是对象时，将返回 NaN，除非是包含单个数值的数组，注意是单个数值。</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>区别 parseInt() 和 Number()：</p><p>parseInt 逐个解析字符，而 Number 函数整体转换字符串的类型，基本上，只要有一个字符无法转成数值，整个字符串就会被转为 NaN。</p></div><h4 id="_3-2-3-parseint" tabindex="-1">3.2.3 parseInt() <a class="header-anchor" href="#_3-2-3-parseint" aria-label="Permalink to &quot;3.2.3 parseInt\\(\\)&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 只保留字符串最开头的数字，后面的中文自动消失</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2017在公众号上写了6篇文章&#39;</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">//打印结果：2017</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2017.01.02在公众号上写了6篇文章&#39;</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">//打印结果仍是：2017</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 如果对非 String使用 parseInt() 或 parseFloat()，它会先将其转换为 String 然后再操作</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">168.23</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">//打印结果：168</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">//打印结果：NaN</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">//打印结果：NaN</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">//打印结果：NaN</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 自动带有截断小数的功能：取整，不四舍五入</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5.8</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// 5</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 第二个参数表示在转换时的进制。</span></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;110&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// 272</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 只保留字符串最开头的数字，后面的中文自动消失</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;2017在公众号上写了6篇文章&#39;</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">//打印结果：2017</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;2017.01.02在公众号上写了6篇文章&#39;</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">//打印结果仍是：2017</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 如果对非 String使用 parseInt() 或 parseFloat()，它会先将其转换为 String 然后再操作</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">168.23</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">//打印结果：168</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">//打印结果：NaN</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">//打印结果：NaN</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">//打印结果：NaN</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 自动带有截断小数的功能：取整，不四舍五入</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5.8</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// 5</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 第二个参数表示在转换时的进制。</span></span>\n<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;110&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// 272</span></span></code></pre></div><h4 id="_3-2-4-string" tabindex="-1">3.2.4 String() <a class="header-anchor" href="#_3-2-4-string" aria-label="Permalink to &quot;3.2.4 String\\(\\)&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 数值：转为相应的字符串。</span></span>\n<span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">123</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;123&quot;</span></span>\n<span class="line"><span style="color:#6A737D;">// 字符串：转换后还是原来的值。</span></span>\n<span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;abc&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;abc&quot;</span></span>\n<span class="line"><span style="color:#6A737D;">// 布尔值：true转为字符串&quot;true&quot;，false转为字符串&quot;false&quot;。</span></span>\n<span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;true&quot;</span></span>\n<span class="line"><span style="color:#6A737D;">// undefined：转为字符串&quot;undefined&quot;。</span></span>\n<span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;undefined&quot;</span></span>\n<span class="line"><span style="color:#6A737D;">// null：转为字符串&quot;null&quot;。</span></span>\n<span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;null&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">({ a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> }) </span><span style="color:#6A737D;">// &quot;[object Object]&quot;</span></span>\n<span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">demo</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;">) {}) </span><span style="color:#6A737D;">// &quot;function demo(x,y){}&quot;</span></span>\n<span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]) </span><span style="color:#6A737D;">// &quot;1,2,3&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 数值：转为相应的字符串。</span></span>\n<span class="line"><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">123</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;123&quot;</span></span>\n<span class="line"><span style="color:#6A737D;">// 字符串：转换后还是原来的值。</span></span>\n<span class="line"><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;abc&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;abc&quot;</span></span>\n<span class="line"><span style="color:#6A737D;">// 布尔值：true转为字符串&quot;true&quot;，false转为字符串&quot;false&quot;。</span></span>\n<span class="line"><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;true&quot;</span></span>\n<span class="line"><span style="color:#6A737D;">// undefined：转为字符串&quot;undefined&quot;。</span></span>\n<span class="line"><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;undefined&quot;</span></span>\n<span class="line"><span style="color:#6A737D;">// null：转为字符串&quot;null&quot;。</span></span>\n<span class="line"><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;null&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6F42C1;">String</span><span style="color:#24292E;">({ a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> }) </span><span style="color:#6A737D;">// &quot;[object Object]&quot;</span></span>\n<span class="line"><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">demo</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#24292E;">) {}) </span><span style="color:#6A737D;">// &quot;function demo(x,y){}&quot;</span></span>\n<span class="line"><span style="color:#6F42C1;">String</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]) </span><span style="color:#6A737D;">// &quot;1,2,3&quot;</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>String 方法的参数如果是对象，返回一个类型字符串；如果是数组，返回数组的字符串形式。</p></div><h4 id="_3-2-5-number-和-string-原理" tabindex="-1">3.2.5 Number() 和 String() 原理 <a class="header-anchor" href="#_3-2-5-number-和-string-原理" aria-label="Permalink to &quot;3.2.5 Number\\(\\) 和 String\\(\\) 原理&quot;">​</a></h4><p>Number() 参数为对象时背后的规则：</p><ol><li>调用对象自身的<code>valueOf</code>方法。如果返回原始类型的值，直接对该值使用<code>Number</code>函数，不再进行后续步骤。</li><li>如果<code>valueOf</code>方法返回的还是对象，则改为调用对象自身的<code>toString</code>方法。如果<code>toString</code>方法返回原始类型的值，则对该值使用<code>Number</code>函数，不再进行后续步骤。</li><li>如果<code>toString</code>方法返回的是对象，就报错。</li></ol><p>String() 参数为对象时背后的规则：</p><ol><li>先调用对象自身的<code>toString</code>方法。如果返回原始类型的值，则对该值使用<code>String</code>函数，不再进行以下步骤。</li><li>如果<code>toString</code>方法返回的是对象，再调用原对象的<code>valueOf</code>方法。如果<code>valueOf</code>方法返回原始类型的值，则对该值使用<code>String</code>函数，不再进行以下步骤。</li><li>如果<code>valueOf</code>方法返回的是对象，就报错。</li></ol><p>Object.prototype.valueOf() 方法的作用是返回一个对象的“值”，默认情况下返回对象本身。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">123</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 123</span></span>\n<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;abc&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// &quot;abc&quot;</span></span>\n<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Boolean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// true</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#E1E4E8;">obj.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> obj </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">123</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 123</span></span>\n<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;abc&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// &quot;abc&quot;</span></span>\n<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Boolean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// true</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">()</span></span>\n<span class="line"><span style="color:#24292E;">obj.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> obj </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>Object.prototype.toString() 方法的作用是返回一个对象的字符串形式，默认情况下返回类型字符串“[object Object]”。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">;[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// &quot;1,2,3&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9ECBFF;">&#39;123&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()(</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;123&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">123</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  )</span></span>\n<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()(</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;function () {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//   return 123;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// }&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#E1E4E8;">  )</span></span>\n<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#6A737D;">// &quot;Tue May 10 2016 09:11:31 GMT+0800 (CST)&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">;[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// &quot;1,2,3&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#032F62;">&#39;123&#39;</span></span>\n<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()(</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;123&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>\n<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">123</span></span>\n<span class="line"><span style="color:#24292E;">    }</span></span>\n<span class="line"><span style="color:#24292E;">  )</span></span>\n<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()(</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;function () {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//   return 123;</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// }&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">()</span></span>\n<span class="line"><span style="color:#24292E;">  )</span></span>\n<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()</span></span>\n<span class="line"><span style="color:#6A737D;">// &quot;Tue May 10 2016 09:11:31 GMT+0800 (CST)&quot;</span></span></code></pre></div>',46);const i=s(c,[["render",function(s,o,t,c,i,u){return e(),n("div",null,[a("h1",r,[l(p(s.$frontmatter.title)+" ",1),y]),E])}]]);export{t as __pageData,i as default};
